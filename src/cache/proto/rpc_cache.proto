// Defines interface to our RPC cache.

syntax = "proto3";

option java_package = "net.thoughtmachine.please.cache";

package proto.rpc_cache;

service RpcCache {
    // Stores an artifact or set of artifacts in the cache.
    rpc Store(StoreRequest) returns (StoreResponse);
    // Retrieves an artifact or set of artifacts from the cache.
    rpc Retrieve(RetrieveRequest) returns (RetrieveResponse);
    // Deletes an artifact from the cache.
    rpc Delete(DeleteRequest) returns (DeleteResponse);
    // Returns the set of currently known cache nodes & their hash topology.
    rpc ListNodes(ListRequest) returns (ListResponse);
}

message Artifact {
    // Package of the artifact
    string package = 1;
    // Target name of the artifact
    string target = 2;
    // Output file from the target
    string file = 3;
    // Contents of it
    bytes body = 4;
}

message StoreRequest {
    // Sequence of artifacts to store.
    repeated Artifact artifacts = 1;
    // OS of requestor
    string os = 2;
    // Architecture of requestor
    string arch = 3;
    // Hash of rule that generated these artifacts
    bytes hash = 4;
}

message StoreResponse {
    // True if store was successful.
    bool success = 1;
}

message RetrieveRequest {
    // Artifacts to retrieve. The 'body' field should obviously not be set.
    // If the 'file' field is not set then all artifacts are retrieved.
    repeated Artifact artifacts = 1;
    // OS of requestor
    string os = 2;
    // Architecture of requestor
    string arch = 3;
    // Hash of rule that generated these artifacts
    bytes hash = 4;
}

message RetrieveResponse {
    // True if retrieve was successful.
    bool success = 1;
    // Contents of artifacts retrieved
    repeated Artifact artifacts = 2;
}

message DeleteRequest {
    // Artifacts to delete. The 'body' field should obviously not be set.
    repeated Artifact artifacts = 1;
    // OS of requestor
    string os = 2;
    // Architecture of requestor
    string arch = 3;
    // True to delete entire cache. 'paths' should be empty if this is set.
    bool everything = 4;
}

message DeleteResponse {
    // True if delete was successful.
    bool success = 1;
}

message ListRequest {
}

message ListResponse {
    // List of known server nodes.
    // If this is empty it indicates that the server is not clustered.
    repeated Node nodes = 1;
}

message Node {
    // A name of this node
    string name = 1;
    // Network address / port of this node
    string address = 2;
    // Beginning of the hash space for this node
    uint32 hash_begin = 3;
    // End of the hash space for this node (exclusive).
    uint32 hash_end = 4;
}
